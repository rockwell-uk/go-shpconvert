package shpconvert

import (
	"encoding/hex"
	"errors"
	"io"
	"os"
	"reflect"
	"strings"
	"testing"

	"github.com/rockwell-uk/shapefile"
)

//nolint:dupl
func TestShpToWKB(t *testing.T) {
	tests := map[string]struct {
		shapeFile      string
		expectedValues map[int]string
	}{
		"HP_Woodland": {
			shapeFile: "./../testdata/HP_Woodland.shp",
			expectedValues: map[int]string{
				0: "0103000000010000000a00000015ae47e19f3b1c41cdccccccef73324133333333ad3b1c41666666e6ec73324100000000033c1c411f85eb9105743241cdcccccc943c1c41333333b3e67332415c8fc2f5073c1c41295c8f02bd73324100000000c73b1c41b81e856bca73324100000000653b1c41666666a6de7332419a999999593b1c4100000000e1733241d7a3703d943b1c4148e17a54f273324115ae47e19f3b1c41cdccccccef733241",
				1: "010300000001000000070000003333333305361c41cdcccc4c9e743241cdcccccc9e351c4133333333a57432413333333375351c4100000000d3743241f6285c8feb341c41a4703d4ad57432415c8fc2f5ed341c41e17a146edb7432419a999999bf351c419a999919e77432413333333305361c41cdcccc4c9e743241",
			},
		},
		"HP_AdministrativeBoundary": {
			shapeFile: "./../testdata/HP_AdministrativeBoundary.shp",
			expectedValues: map[int]string{
				0: "0102000000020000009a99999991dd1b419a9999199c563241000000009edd1b41000000809d563241",
				1: "0102000000020000009a999999edba1b41333333335a5932419a999999f1ba1b416666666655593241",
				2: "01020000000900000000000000c6701c4100000000796a324100000000a0611c4148e17a54a4663241000000000a601c410000008040663241000000008a5a1c4100000000de6432410000000050571c41000000000c643241000000001a561c4100000000be63324185eb51b84a531c410000000008633241000000008c461c4100000000cf5f324100000000a4361c4100000080c65b3241",
				3: "0102000000020000000000000004711c41000000008f733241295c8fc2ab611c411f85eb1105763241",
			},
		},
		"SD_MotorwayJunction": {
			shapeFile: "./../testdata/SD_MotorwayJunction.shp",
			expectedValues: map[int]string{
				0:  "01010000008fc2f528a2911541ec51b81e6d731d41",
				1:  "0101000000676666666ef2154152b81e8522171e41",
				2:  "0101000000713d0ad723f71741b81e85ebb11f1941",
				3:  "010100000015ae47e1095818415c8fc2f554511941",
				4:  "010100000048e17a142c701641a4703d0a44d21841",
				5:  "010100000033333333467d164148e17a14c2e91941",
				6:  "010100000085eb51b8509a164190c2f52830bf1841",
				7:  "0101000000713d0ad7249e1641cdcccccc88f61941",
				8:  "01010000006766666609ad1641295c8fc21a2f1a41",
				9:  "0101000000d7a3703d30d716410ad7a37086b51841",
				10: "0101000000ec51b81eced716413e0ad7a33e3e1a41",
				11: "0101000000f6285c8fa1e4164152b81e8568a61841",
				12: "0101000000e17a14ae28ec1641713d0ad7a3861841",
				13: "01010000001f85eb514cf416419a999999959f1841",
				14: "010100000015ae47e141f81641ec51b81e539a1841",
				15: "0101000000c3f5285ce91117417b14ae47749f1841",
				16: "0101000000b81e85eb591817413e0ad7a394591a41",
				17: "0101000000676666669d3417410ad7a3703f5e1a41",
				18: "010100000052b81e850b38174185eb51b81a541941",
				19: "010100000067666666be3f174190c2f528c2b31841",
				20: "01010000005c8fc2f5805217410ad7a370f40f1941",
				21: "0101000000c3f5285ca152174100000000def81841",
				22: "0101000000ec51b81e265a1741f6285c8f8f681a41",
				23: "010100000033333333075d174167666666e8c71841",
				24: "01010000007b14ae47e26817415c8fc2f54f781a41",
				25: "01010000006766666612761741ec51b81e93b51841",
				26: "0101000000a4703d0a207a1741e17a14ae4cae1a41",
				27: "01010000005c8fc2f5828a17411f85eb51e9c31a41",
				28: "010100000048e17a148493174148e17a1428ad1841",
				29: "0101000000295c8fc2c594174115ae47e10cf41841",
				30: "010100000052b81e8506a61741e17a14aeaad71a41",
				31: "0101000000ae47e17a95c417410ad7a370729f1841",
				32: "010100000000000000adc71741ec51b81ea1061941",
				33: "0101000000cdcccccc2fd61741713d0ad7ed921841",
				34: "0101000000a4703d0a7cda17415c8fc2f543d21841",
				35: "010100000000000000bc91144100000000546b1841",
				36: "01010000008fc2f5285fbf154190c2f52887841841",
				37: "0101000000b81e85eb11c11441a4703d0a928e1841",
				38: "0101000000e17a14ae956315415c8fc2f509ad1841",
				39: "010100000085eb51b876981541e17a14aee1ae1841",
				40: "010100000052b81e85a71315417b14ae4772b41841",
				41: "010100000048e17a147b3a15417b14ae47e9ba1841",
				42: "0101000000f6285c8f3a37164185eb51b820f31841",
				43: "01010000008fc2f5288f9d1541ae47e17a830e1941",
				44: "01010000008fc2f5287ee61541713d0ad7319a1941",
				45: "010100000015ae47e19bb01541713d0ad782c51941",
				46: "01010000005c8fc2f591271641ae47e17a51e91941",
				47: "01010000001f85eb5154bf15413e0ad7a390ea1941",
				48: "0101000000d7a3703de8c315413e0ad7a3bbec1941",
				49: "0101000000ae47e17a72b61541ec51b81ec9ed1941",
				50: "01010000000000000058e015410000000008ee1941",
				51: "0101000000d7a3703d61e015416766666629ee1941",
				52: "0101000000f6285c8f08cd15411f85eb5117131a41",
				53: "01010000000ad7a370b8dc15410ad7a370823e1a41",
				54: "01010000001f85eb513cc415417b14ae478e6a1a41",
				55: "01010000003e0ad7a37476144190c2f5289d751a41",
				56: "0101000000a4703d0a588a1541676666668b7e1a41",
				57: "01010000007b14ae47ccd71441e17a14ae1c8b1a41",
				58: "0101000000295c8fc2f29a1541295c8fc2ff8b1a41",
				59: "010100000048e17a14f44a1541a4703d0aafbd1b41",
				60: "0101000000b81e85ebf3561541cdcccccc3b551c41",
				61: "01010000007b14ae47346d1541c3f5285c3bb71c41",
				62: "010100000000000000c46a15410000000084ce1c41",
				63: "0101000000cdcccccca2dd16411f85eb510d721841",
			},
		},
	}

	for name, test := range tests {
		// Open the shapefile for reading
		sr, err := os.Open(test.shapeFile)
		if err != nil {
			t.Fatal(err)
		}
		defer sr.Close()

		// Open the dbf for reading
		dr, err := os.Open(strings.Replace(test.shapeFile, ".shp", ".dbf", 1))
		if err != nil {
			t.Fatal(err)
		}
		defer dr.Close()

		r, err := shapefile.NewReader(sr, shapefile.WithDBF(dr))
		if err != nil {
			t.Fatal(err)
		}

		i := 0
		for {
			rec, err := r.Next()
			if err != nil {
				if errors.Is(err, io.EOF) {
					break
				}
				t.Fatal(err)
			}

			actual, err := ShpToWKB(rec.Shape)
			if err != nil {
				t.Fatal(err)
			}

			expected := test.expectedValues[i]
			expectedString := hex.EncodeToString(actual)

			if !reflect.DeepEqual(expected, expectedString) {
				t.Errorf("%v [%v]: expected %v\n%v", name, i, expected, expectedString)
			}

			i++
		}
	}
}
